<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adam Thorpe</title>
    <link>https://ajthor.github.io/</link>
      <atom:link href="https://ajthor.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Adam Thorpe</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 10 Dec 2019 23:40:32 +0000</lastBuildDate>
    <image>
      <url>https://ajthor.github.io/img/icon-192.png</url>
      <title>Adam Thorpe</title>
      <link>https://ajthor.github.io/</link>
    </image>
    
    <item>
      <title>Stochastic Reachability</title>
      <link>https://ajthor.github.io/post/stochastic-reachability/</link>
      <pubDate>Tue, 10 Dec 2019 23:40:32 +0000</pubDate>
      <guid>https://ajthor.github.io/post/stochastic-reachability/</guid>
      <description>&lt;p&gt;Safety is defined as a set of constraints that prohibit a system from entering certain states. This could be preventing a quadrotor from hitting a tree, preventing an autonomous car from driving on the sidewalk, etc.
Stochastic reachability is a technique to determine the probability that a system will remain safe over some time horizon. Using these techniques, we can also ensure that a system will reach a target set with a certain likelihood, and we can compute control actions that will maximize the probability of reaching the target. Even though we use the term &amp;ldquo;safety&amp;rdquo;, this is a general term that doesn&#39;t always mean we are only interested in avoiding literal crashes or explosions.&lt;/p&gt;
&lt;p&gt;Formally, the system is defined as a Markov control process, which is a 3-tuple, $\mathcal{H} = (\mathcal{X}, \mathcal{U}, Q)$, consisting of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\mathcal{X}$ is the &lt;em&gt;state space&lt;/em&gt;, which is the set of all possible states the system can occupy.&lt;/li&gt;
&lt;li&gt;$\mathcal{U}$ is the &lt;em&gt;control space&lt;/em&gt;, which is the set of all possible control inputs.&lt;/li&gt;
&lt;li&gt;$Q : \mathscr{B}(\mathcal{X}) \times \mathcal{X} \times \mathcal{U} \rightarrow [0, 1]$ is a stochastic kernel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The state space is usually defined by the physics of the system. If we are dealing with a spacecraft, for example, we typically define $\mathcal{X} \subseteq \Re^{n}$. This means there are $n$ state variables that can take real values. The control space is also usually defined in a similar fashion.
Some problems allow the controller to take on a wide array of values, others restrict the control inputs to a small admissible set of possible inputs.
In the general case, $\mathcal{U} \subseteq \Re^{m}$, and there are $m$ different inputs that we can control.&lt;/p&gt;
&lt;p&gt;The stochastic kernel $Q$ is the most important part of the system definition, because it actually describes how the system &lt;em&gt;changes over time&lt;/em&gt;. For every state $x \in \mathcal{X}$ and control input $u \in \mathcal{U}$, there exists a probability measure $Q(x&#39;|x,u)$ that describes the likelihood that a system will reach any future state $x&amp;rsquo; \in \mathcal{X}$.
For some future states, the probability may equal zero because it is physically impossible to move there. Things can&#39;t just teleport through solid objects, for example.
This means the probability of moving to some states will be low or zero, while the probability of moving to other more probable states will be higher. In general, when we are dealing with a &lt;em&gt;stochastic&lt;/em&gt; system, the probability of transitioning into one particular future state is rarely 1.&lt;/p&gt;
&lt;p&gt;We can see that the stochastic kernel is a collection of probability measures that tells us how the system evolves over time. If we start in a particular state and choose a particular control input, there is a probability that at the next time we will reach some future state. This evolution through time is governed by the dynamics of the system, the control inputs we choose, and by the stochastic disturbance. We typically only have control over the inputs to the system, and so we would like to determine a way to choose the control inputs so that we maximize safety.&lt;/p&gt;
&lt;p&gt;So how do we define a stochastic reachability problem? We start by defining a &lt;em&gt;safe set&lt;/em&gt; $\mathcal{K} \in \mathscr{B}(\mathcal{X})$, which is the feasible region of the state space, and a &lt;em&gt;target set&lt;/em&gt; $\mathcal{T} \in \mathscr{B}(\mathcal{X})$, which is a region of the state space where we want to end up. The goal, then, is to determine the probability that a system will &lt;em&gt;reach&lt;/em&gt; $\mathcal{T}$ while &lt;em&gt;avoiding&lt;/em&gt; $\mathcal{X}\backslash\mathcal{K}$ for all time $k \in [0, N]$.&lt;/p&gt;
&lt;p&gt;$$V_{N}(x) ={} \boldsymbol{1}_{\mathcal{T}}(x)$$
$$V_{k}(x) ={} \boldsymbol{1}_{\mathcal{K}}(x)\mathbb{E}_{\boldsymbol{y} \sim Q(\cdot|x, u)}[V_{k+1}(\boldsymbol{y})]$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kernel Distribution Embeddings</title>
      <link>https://ajthor.github.io/post/kernel-distribution-embeddings/</link>
      <pubDate>Tue, 10 Dec 2019 23:40:16 +0000</pubDate>
      <guid>https://ajthor.github.io/post/kernel-distribution-embeddings/</guid>
      <description>&lt;p&gt;Coming soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kernel Methods</title>
      <link>https://ajthor.github.io/post/kernel-methods/</link>
      <pubDate>Tue, 10 Dec 2019 23:35:04 +0000</pubDate>
      <guid>https://ajthor.github.io/post/kernel-methods/</guid>
      <description>&lt;p&gt;Coming soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SReachTools</title>
      <link>https://ajthor.github.io/project/sreachtools/</link>
      <pubDate>Mon, 09 Dec 2019 23:09:21 +0000</pubDate>
      <guid>https://ajthor.github.io/project/sreachtools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SymMath</title>
      <link>https://ajthor.github.io/project/symmath/</link>
      <pubDate>Mon, 09 Dec 2019 23:08:38 +0000</pubDate>
      <guid>https://ajthor.github.io/project/symmath/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Model-Free Stochastic Reachability Using Kernel Distribution Embeddings</title>
      <link>https://ajthor.github.io/publication/thorpe-2019-model/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://ajthor.github.io/publication/thorpe-2019-model/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Stochastic Reachability for Systems up to a Million Dimensions</title>
      <link>https://ajthor.github.io/publication/thorpe-2019-stochastic/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://ajthor.github.io/publication/thorpe-2019-stochastic/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
